from typing import List

def rol8(b: int, r: int) -> int:
    r %= 8
    return ((b << r) & 0xff) | ((b & 0xff) >> (8 - r))

def ror8(b: int, r: int) -> int:
    r %= 8
    return ((b & 0xff) >> r) | ((b << (8 - r)) & 0xff)

tbl = bytes([
  0x3a,0x5c,0x2d,0xa9,0x17,0x3e,0x9d,0x1b,0x48,0x0f,0x72,0x1a,0x36,0xe0,0xc5,0x7f,
  0x23,0x42,0x94,0x3b,0xf0,0x5a,0xb1,0xd8,0x15,0x81,0x2e,0x6d,0x77,0x6e,0xe7,0x55,
  0x34,0xc4,0x4b,0x60,0xab,0x20,0x98,0x7e,0x1d,0xf7,0x2b,0x51,0xcd,0x99,0x0c,0xbe,
  0x9f,0xaf,0x65,0x08,0x04,0x5e,0x16,0x84,0x38,0x1e,0x72,0xa1,0x3b,0x44,0x56,0x29,
  0x97
])

xor_key = bytes([
  0x5a,0x0c,0x3f,0x7e,0x22,0xb1,0x1d,0x4f,0x38,0x6e,0xa4,0xe7,0x2c,0xf1,0x0b,0xdc,
  0x55,0x6a,0x37,0xb9,0x19,0x99,0xab,0x8e,0x10,0x21,0xcb,0x14,0x8f,0xad,0xcd,0xea,
  0x42,0x3d,0x59,0x9c,0xbf,0xf3,0x81,0x50,0x73,0x47,0x99,0x34,0x62,0xd1,0x7c,0x16,
  0x44,0xc9,0x28,0xa8,0x79,0x1e,0xb7,0x12,0xff,0x2c,0x84,0x11,0x97,0x33,0x67,0x42,0xaa
])

expected = bytes([
  0x12,0xc8,0x5e,0xb8,0x59,0x40,0xb2,0x8d,0x88,0xeb,0xad,0x0b,0x29,0x8b,0x4e,0x66,
  0x3b,0x95,0x21,0xd4,0x8e,0xf3,0x33,0x99,0xd6,0x48,0xfe,0xd7,0x92,0x2e,0x0c,0x0c,
  0x07,0x7f,0x91,0x7a,0x2c,0xf0,0x12,0xb3,0xf2,0xb1,0xec,0x02,0xff,0x6b,0xda,0xa0,
  0x48,0xeb,0x1d,0x4b,0x7e,0x5c,0xc4,0x29,0x36,0x49,0x5d,0xaa,0xa6,0x21,0x4f,0x5f,
  0x88
])

def invert_transform(expected: bytes, tbl: bytes, xor_key: bytes) -> bytes:
    assert len(expected) == 65
    assert len(tbl) == 65
    assert len(xor_key) == 65
    out = bytearray(65)
    for i in range(65):
        idx = (i * 7) % 65
        confused = expected[i] ^ tbl[idx]
        if (i & 1) == 0:
            shift = (i % 5) + 1
            b = ror8(confused, shift)
        else:
            shift = (i & 3) + 1
            b = rol8(confused, shift)
        plain = b ^ xor_key[i]
        out[i] = plain & 0xff
    return bytes(out)

flag = invert_transform(expected, tbl, xor_key)
try:
    print(flag.decode('utf-8', errors='replace'))
except Exception as e:
    print("Could not decode cleanly:", e)