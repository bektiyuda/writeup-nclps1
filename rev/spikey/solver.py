mystBlockF = bytes([
    0x46,0x83,0x15,0x56,0xDF,0x99,0xE4,0xB5,0x2F,0x26,0xDA,0x6B,0x03,0xD7,0x8E,0x75,
    0xB5,0xF0,0xB3,0xBB,0xA0,0x21,0xB4,0xC0,0x9F,0x86,0x17,0x4A,0x56,0x51,0x9B,0x8F,
    0xB2,0x6A,0x86,0xD2,0x1E,0x97,0x31,0x78,0x13,0xB7,0xC3,0x98,0x48,0x79,0x6E,0xF5,
    0xAF,0x34,0x1A,0xB4,0x4E,0x43,0x8C,0x49,0xBC,0x2B,0xC9,0x83,0x2F,0x1D,0xBF,0xE1,
    0xE1,0x33,0x6D,0xDE,0xFA,0x3D,0x4E,0x44,0xEE,0xF6,0x86,0x27,0x28,0x37
])

helperKey = bytes([0x3D, 0xA7, 0x4F, 0x1C, 0xE5])

def ror8(x, s):
    s &= 7
    return ((x >> s) | ((x << (8 - s)) & 0xFF)) & 0xFF

def revOp(b, idx):
    k = (idx * 3 + 5) % 8
    if k == 0:
        k = 1
    r = ror8((~b) & 0xFF, k)
    return ((r + 0xA6) & 0xFF) ^ helperKey[idx % 5]

out = bytearray()
for i, bb in enumerate(mystBlockF[:78]):
    out.append(revOp(bb, i))

flag = out.decode('utf-8', errors='strict')
print(flag)